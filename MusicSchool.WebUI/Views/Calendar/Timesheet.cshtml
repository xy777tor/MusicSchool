@using MusicSchool.WebUI.Views.Enums;
@using MusicSchool.WebUI.Models;
@using System.Text.Json;
@model TimesheetViewModel;
@{
    Layout = "~/Views/Shared/_TimesheetLayout.cshtml";
    ViewData["Title"] = "Расписание";
    IEnumerable<SelectListItem> week = Html.GetEnumSelectList<WeekDays>();
    string weekBackward = Model.RequiredDay.AddDays(-7).ToShortDateString();
    string weekForward = Model.RequiredDay.AddDays(7).ToShortDateString();
}

<link rel="stylesheet" type="text/css" href="~/css/timesheet.css" asp-append-version="true" />

<div class="calendar-navigation">
    <div class="me-1">
        @* <h3>Переделать запрос</h3> *@
        <form asp-controller="Calendar" asp-action="PickDate" id="pick-date-form">
            <input type="date" value="@Model.RequiredDay.ToString("yyyy-MM-dd")" asp-for="RequiredDay" id="date-to-pick" />
            <button type="submit" class="btn btn-primary">Перейти</button>
        </form>
    </div>
    <div>
        @* <h3>Переделать запрос</h3> *@
        <button class="btn btn-primary" onclick="getToday()">Сегодня</button>
        <button class="btn btn-primary" onclick="getPreviousWeek()">&lt;</button>
        <button class="btn btn-primary" onclick="getNextWeek()">&gt;</button>
    </div>
</div>

<div class="modal fade" id="add-event-modal" tabindex="-1" aria-labelledby="add-event-window-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="add-event-window-label">Добавить занятие</h1>
                <button id="close-modal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div>
                @{
                    await Html.RenderPartialAsync("AddEventWindow", Model.EventWindowViewModel);
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="edit-event-modal" tabindex="-1" aria-labelledby="edit-event-window-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="edit-event-window-label">Изменить занятие</h1>
                <button id="close-modal-edit" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div>
                @{
                    await Html.RenderPartialAsync("EditEventWindow", Model.EventWindowViewModel);
                }
            </div>
        </div>
    </div>
</div>

<div class="timesheet">
    <div class="timesheet-header">
        <div class="timesheet-add-event-btn">
            <span></span>
            <a id="open-add-event-modal"
               class="timesheet-add-event btn-light rounded-circle"
               data-bs-toggle="modal"
               data-bs-target="#add-event-modal">
                <div>+</div>
            </a>
        </div>
        <div class="timesheet-date">
            @{
                DateTime today = DateTime.Today;
                DateTime numOfDay = Model.GetMonday(Model.RequiredDay);
            }
            @foreach (var day in week)
            {
                <div class="text-center">
                    @if (numOfDay > today)
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-secondary">@day.Text</div>
                            <div class="text-dark" id="num">@numOfDay.Day</div>
                        </div>
                    }
                    else if (numOfDay == today)
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-primary">@day.Text</div>
                            <div class="today bg-primary shadow" id="num">@numOfDay.Day</div>
                        </div>
                    }
                    else
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-secondary">@day.Text</div>
                            <div class="text-secondary" id="num">@numOfDay.Day</div>
                        </div>
                    }
                </div>
                numOfDay = numOfDay.AddDays(1);
            }
        </div>
    </div>
    <div class="timesheet-body">
        <div>
            <div class="timesheet-hours-abs">
                <div class="timesheet-time-column">
                    <div>
                        <div class="timesheet-time">
                            <div class="timesheet-hour text-end"></div>
                            @for (int i = 1; i < 24; i++)
                            {
                                <div class="timesheet-hour text-end">
                                    <span class="time-hour">@TimeOnly.MinValue.AddHours(i)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="timesheet-event-date-column">
            <div class="timesheet-event-date">

                @{
                    List<EventWindowViewModel> eventWindows = new();

                    for (int i = 0; i < 7; i++)
                    {
                        <div>
                            @{
                                for (int j = 0; j < 24; j++)
                                {
                                    <span></span>
                                }

                                double heightSum = 0;
                                eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(i));

                                foreach (var eventWindow in eventWindows)
                                {
                                    double eventWindowDuration = (eventWindow.EndDateTime - eventWindow.StartDateTime).TotalMinutes / 60 * 2.5;
                                    string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                                    string windowTop = (((eventWindow.StartDateTime.TimeOfDay.TotalMinutes - 24 * 60) / 60 * 2.5) - heightSum)
                                    .ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                                    heightSum += eventWindowDuration;
                                    <div class="event-window"
                                         style="height: @windowHeight; top: @windowTop"
                                         data-bs-toggle="modal"
                                         data-bs-target="#edit-event-modal"
                                         onclick='fillModal(@Json.Serialize(eventWindow))'>
                                        @eventWindow.Title<br />
                                        @eventWindow.StartDateTime.TimeOfDay
                                    </div>
                                }
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    // hot keys
    var addHotKeys = function () {
        var titleInput = document.getElementById("title-input")
        var titleValidator = document.getElementById("title-validator")
        var targetModal = document.getElementById("add-event-modal")
        var closeModal = document.getElementById("close-modal")
        var openAddEventButton = document.getElementById("open-add-event-modal")

        targetModal.addEventListener("shown.bs.modal", function () {
            titleInput.focus()
        })

        var openHandler = function (event) {
            if (event.keyCode === 13 || event.keyCode === 107) {
                openAddEventButton.click()
                document.removeEventListener("keydown", openHandler)
                document.addEventListener("keydown", closeHandler)
            }
        }

        var closeHandler = function (event) {
            if (event.keyCode === 27) {
                closeModal.click()
                document.addEventListener("keydown", openHandler)
            }
        }

        document.addEventListener("keydown", openHandler)
    }

    addHotKeys()

    // modal windows
    {
        // fill edit modal window
        {
            var id = document.querySelector("#id-input-edit")
            var title = document.querySelector("#title-input-edit")
            var startDate = document.querySelector("#start-date-time-input-edit")
            var endDate = document.querySelector("#end-date-time-input-edit")

            var fillModal = function (event) {
                id.value = event.id
                title.value = event.title
                startDate.value = event.startDateTime
                endDate.value = event.endDateTime
            }
        }

        var clearValidation = function () {
            $(".validator.text-danger").html("")
        }

        var addForm = document.querySelector("#add-form")

        var updateAddForm = function () {
            addForm = document.querySelector("#add-form")
            addForm.addEventListener("submit", (event) => {
                event.preventDefault()
                addEventWindow()
            })
        }

        updateAddForm()

        var addEventWindow = function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("Add", "Calendar")",
                data: new FormData(addForm),
                contentType: false,
                processData: false,
                dataType: "html",
                success: (response) => {
                    var timesheet = $(response).find(".timesheet-body")
                    var success = timesheet.length > 0

                    if (success) {
                        $("#close-modal").click()
                        $(".timesheet-body").replaceWith(timesheet)
                        clearValidation()
                    } else {
                        $("#add-form").replaceWith(response)
                        updateAddForm()
                    }
                }
            })
        }

        var editForm = document.querySelector("#up-del-form")

        var updateEditForm = function () {
            editForm = document.querySelector("#up-del-form")
            editForm.addEventListener("submit", (event) => {
                event.preventDefault()
                editEventWindow()
            })
        }

        updateEditForm()

        var editEventWindow = function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("Update", "Calendar")",
                data: new FormData(editForm),
                contentType: false,
                processData: false,
                dataType: "html",
                success: (response) => {
                    var timesheet = $(response).find(".timesheet-body")
                    var success = timesheet.length > 0

                    if (success) {
                        $("#close-modal-edit").click()
                        $(".timesheet-body").replaceWith(timesheet)
                        clearValidation()
                    } else {
                        $("#up-del-form").replaceWith(response)
                        updateEditForm()
                    }
                }
            });
        }

        var deleteWindow = function () {
            var data = new FormData()
            var id = $("#id-input-edit").val()
            var date = $("#start-date-time-input-edit").val()
            data.append("id", id)
            data.append("date", date)

            $.ajax({
                type: "POST",
                url: "@Url.Action("Delete", "Calendar")",
                data: data,
                contentType: false,
                processData: false,
                dataType: "html",
                success: (response) => {
                    var timesheet = $(response).find(".timesheet-body")
                    $("#close-modal-edit").click()
                    $(".timesheet-body").replaceWith(timesheet)
                }
            });
        }
    }

    var currentDate = new Date("@Model.RequiredDay.ToString("yyyy-MM-dd")")
    var datePickerForm = document.querySelector("#pick-date-form")
    var dateToPick = document.querySelector("#date-to-pick")

    var getToday = function () {
        $.ajax({
            type: "get",
            url: "Timesheet/@DateTime.Today.ToString("dd.MM.yyyy")",
            dataType: "html",
            success: (response) => {
                var timesheet = $(response).find(".timesheet-body")
                var dates = $(response).find(".timesheet-date")
                $(".timesheet-body").replaceWith(timesheet)
                $(".timesheet-date").replaceWith(dates)
                currentDate = new Date()
                dateToPick.value = currentDate.toISOString().split('T')[0]
            }
        })
    }

    var getPreviousWeek = function () {
        var previousWeekDate = new Date(currentDate)
        previousWeekDate.setDate(currentDate.getDate() - 7)
        $.ajax({
            type: "get",
            url: "Timesheet/" + previousWeekDate.getDate() + '.' + (previousWeekDate.getMonth() + 1) + '.' + previousWeekDate.getFullYear(),
            dataType: "html",
            success: (response) => {
                var timesheet = $(response).find(".timesheet-body")
                var dates = $(response).find(".timesheet-date")
                $(".timesheet-body").replaceWith(timesheet)
                $(".timesheet-date").replaceWith(dates)
                currentDate.setDate(currentDate.getDate() - 7)
                dateToPick.value = currentDate.toISOString().split('T')[0]
            }
        })
    }

    var getNextWeek = function () {
        var nextWeekDate = new Date(currentDate)
        nextWeekDate.setDate(currentDate.getDate() + 7)
        $.ajax({
            type: "get",
            url: "Timesheet/" + nextWeekDate.getDate() + '.' + (nextWeekDate.getMonth() + 1) + '.' + nextWeekDate.getFullYear(),
            dataType: "html",
            success: (response) => {
                var timesheet = $(response).find(".timesheet-body")
                var dates = $(response).find(".timesheet-date")
                $(".timesheet-body").replaceWith(timesheet)
                $(".timesheet-date").replaceWith(dates)
                currentDate.setDate(currentDate.getDate() + 7)
                dateToPick.value = currentDate.toISOString().split('T')[0]
            }
        })
    }

    datePickerForm.addEventListener("submit", (event) => {
        event.preventDefault()
        pickDate()
    })

    var pickDate = function () {
        var formData = new FormData(datePickerForm)
        $.ajax({
            type: "post",
            url: "@Url.Action("PickDate", "Calendar")",
            dataType: "html",
            contentType: false,
            processData: false,
            data: formData,
            success: (response) => {
                var timesheet = $(response).find(".timesheet-body")
                var dates = $(response).find(".timesheet-date")
                $(".timesheet-body").replaceWith(timesheet)
                $(".timesheet-date").replaceWith(dates)
                currentDate = new Date(formData.get("RequiredDay"))
            }
        })
    }
</script>