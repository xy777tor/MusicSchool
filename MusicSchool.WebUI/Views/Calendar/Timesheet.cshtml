@using MusicSchool.WebUI.Views.Enums;
@using MusicSchool.WebUI.Models;
@using System.Text.Json;
@model TimesheetViewModel;
@{
    Layout = "~/Views/Shared/_TimesheetLayout.cshtml";
    ViewData["Title"] = "Расписание";
    IEnumerable<SelectListItem> week = Html.GetEnumSelectList<WeekDays>();
    string weekBackward = Model.RequiredDay.AddDays(-7).ToShortDateString();
    string weekForward = Model.RequiredDay.AddDays(7).ToShortDateString();
}

<link rel="stylesheet" type="text/css" href="~/css/timesheet.css" asp-append-version="true" />

<div class="calendar-navigation">
    <div class="me-1">
        <form method="post" asp-controller="Calendar" asp-action="PickDate">
            <input type="date" value="@Model.RequiredDay.ToString("yyyy-MM-dd")" asp-for="RequiredDay" />
            <button type="submit" class="btn btn-primary">Перейти</button>
        </form>
    </div>
    <div>
        <form method="get">
            <button asp-controller="Calendar"
                    asp-action="Timesheet"
                    asp-route-date="@DateTime.Today.ToShortDateString()"
                    class="btn btn-primary">
                Сегодня
            </button>
            <button asp-controller="Calendar"
                    asp-action="Timesheet"
                    asp-route-date="@weekBackward"
                    class="btn btn-primary">
                &lt;
            </button>
            <button asp-controller="Calendar"
                    asp-action="Timesheet"
                    asp-route-date="@weekForward"
                    class="btn btn-primary">
                &gt;
            </button>
        </form>
    </div>
</div>

<div class="modal fade" id="add-event-modal" tabindex="-1" aria-labelledby="add-event-window-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="add-event-window-label">Добавить занятие</h1>
                <button id="close-modal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div>
                @{
                    await Html.RenderPartialAsync("AddEventWindow", Model.EventWindowViewModel);
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="edit-event-modal" tabindex="-1" aria-labelledby="edit-event-window-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="edit-event-window-label">Изменить занятие</h1>
                <button id="close-modal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div>
                @{
                    await Html.RenderPartialAsync("EditEventWindow", Model.EventWindowViewModel);
                }
            </div>
        </div>
    </div>
</div>

<div class="timesheet">
    <div class="timesheet-header">
        <div class="timesheet-add-event-btn">
            <span></span>
            <a id="open-add-event-modal"
               class="timesheet-add-event btn-light rounded-circle"
               data-bs-toggle="modal"
               data-bs-target="#add-event-modal">
                <div>+</div>
            </a>
        </div>
        <div class="timesheet-date">
            @{
                DateTime today = DateTime.Today;
                DateTime numOfDay = Model.GetMonday(Model.RequiredDay);
            }
            @foreach (var day in week)
            {
                <div class="text-center">
                    @if (numOfDay > today)
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-secondary">@day.Text</div>
                            <div class="text-dark" id="num">@numOfDay.Day</div>
                        </div>
                    }
                    else if (numOfDay == today)
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-primary">@day.Text</div>
                            <div class="today bg-primary shadow" id="num">@numOfDay.Day</div>
                        </div>
                    }
                    else
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-secondary">@day.Text</div>
                            <div class="text-secondary" id="num">@numOfDay.Day</div>
                        </div>
                    }
                </div>
                numOfDay = numOfDay.AddDays(1);
            }
        </div>
    </div>
    <div class="timesheet-body">
        <div>
            <div class="timesheet-hours-abs">
                <div class="timesheet-time-column">
                    <div>
                        <div class="timesheet-time">
                            <div class="timesheet-hour text-end"></div>
                            @for (int i = 1; i < 24; i++)
                            {
                                <div class="timesheet-hour text-end">
                                    <span class="time-hour">@TimeOnly.MinValue.AddHours(i)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="timesheet-event-date-column">
            <div class="timesheet-event-date">

                @{
                    List<EventWindowViewModel> eventWindows = new();

                    for (int i = 0; i < 7; i++)
                    {
                        <div>
                            @{
                                for (int j = 0; j < 24; j++)
                                {
                                    <span></span>
                                }

                                double heightSum = 0;
                                eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(i));

                                foreach (var eventWindow in eventWindows)
                                {
                                    double eventWindowDuration = (eventWindow.EndDateTime - eventWindow.StartDateTime).TotalMinutes / 60 * 2.5;
                                    string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                                    string windowTop = (((eventWindow.StartDateTime.TimeOfDay.TotalMinutes - 24 * 60) / 60 * 2.5) - heightSum)
                                    .ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                                    heightSum += eventWindowDuration;
                                    <div class="event-window"
                                         style="height: @windowHeight; top: @windowTop"
                                         data-bs-toggle="modal"
                                         data-bs-target="#edit-event-modal"
                                         onclick='fillModal(@Json.Serialize(eventWindow))'>
                                        @eventWindow.Title<br />
                                        @eventWindow.StartDateTime.TimeOfDay
                                    </div>
                                }
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    // hot keys
    {
        var titleInput = document.getElementById("title-input");
        var titleValidator = document.getElementById("title-validator");
        var targetModal = document.getElementById("add-event-modal");
        var closeModal = document.getElementById("close-modal");
        var openAddEventButton = document.getElementById("open-add-event-modal");

        targetModal.addEventListener("shown.bs.modal", function () {
            titleInput.focus();
        });

        var openHandler = function (event) {
            if (event.keyCode === 13 || event.keyCode === 107) {
                openAddEventButton.click();
                document.removeEventListener("keydown", openHandler);
                document.addEventListener("keydown", closeHandler);
            }
        }

        var closeHandler = function (event) {
            if (event.keyCode === 27) {
                closeModal.click();
                document.addEventListener("keydown", openHandler);
            }
        }

        document.addEventListener("keydown", openHandler);
    }

    // modal windows
    {
        // fill edit modal window
        {
            var id = document.querySelector("#id-input-edit");
            var title = document.querySelector("#title-input-edit");
            var startDate = document.querySelector("#start-date-time-input-edit");
            var endDate = document.querySelector("#end-date-time-input-edit");

            var fillModal = (event) => {
                id.value = event.id;
                title.value = event.title;
                startDate.value = event.startDateTime;
                endDate.value = event.endDateTime;
            }
        }

        // edit event modal window DateTime inputs validation
        {
            var startDateTimeInputEdit = document.querySelector("#start-date-time-input-edit");
            var endDateTimeInputEdit = document.querySelector("#end-date-time-input-edit");
            var submitButtonEdit = document.querySelector("#submit-button-edit");
            var validationWarningSpanEdit = document.querySelector("#end-date-time-validator-edit");

            var validateEditEventModel = () => {
                var startDateTime = new Date(startDateTimeInputEdit.value);
                var endDateTime = new Date(endDateTimeInputEdit.value);

                if (startDateTime >= endDateTime) {
                    validationWarningSpanEdit.textContent = "Дата окончания должна быть позже даты начала.";
                    return;
                }

                if (startDateTime.getDay() !== endDateTime.getDay()) {
                    validationWarningSpanEdit.textContent = "Событие должно начинаться и заканчиваться в один день.";
                    return;
                }

                submitButtonEdit.click();
            }
        }

        var addEventWindow = () => {
            var viewModel = {
                Id: 0,
                Title: $("#title-input").val(),
                StartDateTime: $("#start-date-time-input").val(),
                EndDateTime: $("#end-date-time-input").val()
            }

            $.ajax({
                type: "POST",
                url: "@Url.Action("Add", "Calendar")",
                data: JSON.stringify(viewModel),
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: (response) => {
                    var timesheet = $(response).find(".timesheet");
                    var success = timesheet.length > 0;

                    if (success) {
                        $("#close-modal").click();
                        $(".timesheet").replaceWith(timesheet);
                    } else {
                        $("#add-form").replaceWith(response);
                    }
                }
            });
        }
    }
</script>