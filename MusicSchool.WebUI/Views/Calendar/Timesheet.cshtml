@using MusicSchool.WebUI.Views.Enums;
@using MusicSchool.WebUI.Models;
@model TimesheetViewModel;
@{
    Layout = "~/Views/Shared/_TimesheetLayout.cshtml";
    ViewData["Title"] = "Расписание";
    IEnumerable<SelectListItem> week = Html.GetEnumSelectList<WeekDays>();
    string weekBackward = Model.RequiredDay.AddDays(-7).ToShortDateString();
    string weekForward = Model.RequiredDay.AddDays(7).ToShortDateString();
}

<link rel="stylesheet" type="text/css" href="~/css/timesheet.css" />

<div class="calendar-navigation">
    <div class="me-1">
        <form method="post" asp-controller="Calendar" asp-action="PickDate">
            <input type="date" value="@Model.RequiredDay.ToString("yyyy-MM-dd")" asp-for="RequiredDay" />
            <button type="submit" class="btn btn-primary">Перейти</button>
        </form>
    </div>
    <div>
        <form method="get">
            <button asp-controller="Calendar"
                    asp-action="Timesheet"
                    asp-route-date="@DateTime.Today.ToShortDateString()"
                    class="btn btn-primary">
                Сегодня
            </button>
            <button asp-controller="Calendar"
                    asp-action="Timesheet"
                    asp-route-date="@weekBackward"
                    class="btn btn-primary">
                &lt;
            </button>
            <button asp-controller="Calendar"
                    asp-action="Timesheet"
                    asp-route-date="@weekForward"
                    class="btn btn-primary">
                &gt;
            </button>
        </form>
    </div>
</div>

<div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Добавить занятие</h1>
                <button id="closeModal" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div>
                @{
                    await Html.RenderPartialAsync("AddEventWindow", Model.AddEventWindowViewModel);
                }
            </div>
        </div>
    </div>
</div>

<div class="timesheet">
    <div class="timesheet-header">
        <div class="timesheet-add-event-btn">
            <span></span>
            <a id="openAddEventModal" class="timesheet-add-event btn-light rounded-circle"
               data-bs-toggle="modal"
               data-bs-target="#addEventModal">
                <div>+</div>
            </a>
        </div>
        <div class="timesheet-date">
            @{
                DateTime today = DateTime.Today;
                DateTime numOfDay = Model.GetMonday(Model.RequiredDay);
            }
            @foreach (var day in week)
            {
                <div class="text-center">
                    @if (numOfDay > today)
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-secondary">@day.Text</div>
                            <div class="text-dark" id="num">@numOfDay.Day</div>
                        </div>
                    }
                    else if (numOfDay == today)
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-primary">@day.Text</div>
                            <div class="today bg-primary shadow" id="num">@numOfDay.Day</div>
                        </div>
                    }
                    else
                    {
                        <span></span>
                        <div>
                            <div class="day-of-week text-secondary">@day.Text</div>
                            <div class="text-secondary" id="num">@numOfDay.Day</div>
                        </div>
                    }
                </div>
                numOfDay = numOfDay.AddDays(1);
            }
        </div>
    </div>
    <div class="timesheet-body">
        <div>
            <div class="timesheet-hours-abs">
                <div class="timesheet-time-column">
                    <div>
                        <div class="timesheet-time">
                            <div class="timesheet-hour text-end"></div>
                            @for (int i = 1; i < 24; i++)
                            {
                                <div class="timesheet-hour text-end">
                                    <span class="time-hour">@TimeOnly.MinValue.AddHours(i)</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="timesheet-event-date-column">
            <div class="timesheet-event-date">
                <div id="monday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        List<EventWindowViewModel> eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
                <div id="thuesday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(1));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
                <div id="wednesday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(2));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
                <div id="thursday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(3));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
                <div id="friday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(4));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
                <div id="saturday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(5));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
                <div id="sunday">
                    @{
                        for (int i = 0; i < 24; i++)
                        {
                            <span></span>
                        }

                        eventWindows = Model.GetEventWindowViewModelsByDate(Model.GetMonday(Model.RequiredDay).AddDays(6));
                        for (int i = 0; i < eventWindows.Count; i++)
                        {
                            double eventWindowDuration = (eventWindows[i].EndDateTime - eventWindows[i].StartDateTime).TotalMinutes / 60 * 2.5;
                            string windowHeight = eventWindowDuration.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) + "rem";
                            <div class="event-window" style="height: @windowHeight">
                                @eventWindows[i].Title<br />
                                @eventWindows[i].StartDateTime.TimeOfDay
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>

    var titleInput = document.getElementById("titleInput");
    var titleValidator = document.getElementById("title-validator");
    var targetModal = document.getElementById("addEventModal");
    var closeModal = document.getElementById("closeModal");
    var openAddEventButton = document.getElementById("openAddEventModal");

    targetModal.addEventListener("shown.bs.modal", function () {
        titleInput.focus();
    });

    var openHandler = function (event) {
        if (event.keyCode === 13 || event.keyCode === 107) {
            openAddEventButton.click();
            document.removeEventListener("keydown", openHandler);
            document.addEventListener("keydown", closeHandler);
        }
    }

    var closeHandler = function (event) {
        if (event.keyCode === 27) {
            closeModal.click();
            document.addEventListener("keydown", openHandler);
        }
    }

    document.addEventListener("keydown", openHandler);

</script>